buildscript {
    ext {
        jooqVersion = '3.19.14'
        jooqScriptName = 'Ifyoudev'
        flywayVersion = '11.7.2'
        snippetsDir = file('build/generated-snippets') // for spring rest docs
    }

    dependencies {
        classpath "org.flywaydb:flyway-mysql:${flywayVersion}"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'nu.studer.jooq' version '9.0' // jOOQ DSL 생성기
    id 'org.flywaydb.flyway' version "${flywayVersion}" // flyway
    id 'org.asciidoctor.jvm.convert' version '4.0.4' // spring rest docs
}

group = 'io.ifyoudev'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt // for spring rest docs
}

repositories {
    mavenCentral()
}

dependencies {
    // jwt
    implementation 'com.auth0:java-jwt:4.4.0'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    // jOOQ
    implementation ('org.springframework.boot:spring-boot-starter-jooq') {
        exclude group: 'org.jooq:jooq'
    }
    implementation "org.jooq:jooq:${jooqVersion}"
    jooqGenerator "org.jooq:jooq:${jooqVersion}"
    jooqGenerator "org.jooq:jooq-meta:${jooqVersion}"
    jooqGenerator 'com.mysql:mysql-connector-j'

    // flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    // spring rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir // for spring rest docs
}

test {
    outputs.dir snippetsDir
}

/** jOOQ Generator **/
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/generated']
        }
    }
}

String dbHost = System.properties["db-host"] ?: "localhost"
String dbPort = System.properties["db-port"] ?: "3307"
String dbName = System.properties["db-name"] ?: "ifyoudev"
String dbUser = System.properties["db-user"] ?: "root"
String dbPasswd = System.properties["db-passwd"] ?: "root"


jooq {
    version = "${jooqVersion}"
    configurations {
        "${jooqScriptName}" {
            generationTool {
                jdbc {
                    driver = 'com.mysql.cj.jdbc.Driver'
                    url = "jdbc:mysql://${dbHost}:${dbPort}"
                    user = "${dbUser}"
                    password = "${dbPasswd}"
                }

                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.mysql.MySQLDatabase'
                        unsignedTypes = true
                        schemata {
                            schema {
                                inputSchema = "${dbName}"
                            }
                        }
                        // flyway 테이블 제외하기
                        excludes = 'flyway_schema_history'
                        forcedTypes {
                            forcedType {
                                userType = 'java.lang.Long'
                                includeTypes = '(?i)int unsigned'
                            }

                            forcedType {
                                userType = 'java.lang.Integer'
                                includeTypes = '(?i)tinyint unsigned'
                            }

                            forcedType {
                                userType = 'java.lang.Integer'
                                includeTypes = '(?i)smallint unsigned'
                            }

                            forcedType {
                                userType = 'java.lang.Integer'
                                includeTypes = '(?i)mediumint unsigned'
                            }
                        }
                    }

                    generate {
                        daos = true
                        records = true
                        fluentSetters = true
                        javaTimeTypes = true
                        deprecated = false
                    }

                    target {
                        directory = 'src/generated'
                    }
                }
            }
        }
    }
}

/** flyway config **/
flyway {
    url = "jdbc:mysql://${dbHost}:${dbPort}/${dbName}"
    user = "${dbUser}"
    password = "${dbPasswd}"
    locations = ['classpath:db/migration']
    baselineOnMigrate = true
}

/** flywayMigrate -> jooqGenerate 순서로 실행되도록 의존성 관리 **/
tasks.named('compileJava').configure {
    dependsOn tasks.named("generate${jooqScriptName}Jooq")
}

tasks.named("generate${jooqScriptName}Jooq").configure {
    dependsOn tasks.named('flywayMigrate')
}

/** spring rest docs config **/
asciidoctor {
    configurations 'asciidoctorExt'
    baseDirFollowsSourceFile()
    inputs.dir snippetsDir
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

tasks.register('copyDocument', Copy) {
    dependsOn tasks.named('asciidoctor')
    from file('build/docs/asciidoc') // 복사할 원본 디렉토리
    into file('src/main/resources/static/docs') // 복사될 대상 디렉토리
}

tasks.named('build').configure {
    dependsOn tasks.named('copyDocument')
}

/**
 * build 흐름
 * flywayMigrate -> generateIfyoudevJooq -> ... -> test -> asciidoctor -> copyDocument -> build
 */
